@using System.Web.Mvc.Html

@model TcbInternetSolutions.Vulcan.UI.Models.ViewModels.HomeViewModel

@{
    // ReSharper disable UseOfImplicitGlobalInFunctionScope
    // ReSharper disable UnknownCssClass
    // ReSharper disable PossiblyUnassignedProperty
    Layout = "../Shared/Layouts/_epi.cshtml";
}

<div style="margin:10px;overflow:scroll;" class="clientContainer">
    <h2>Vulcan Configuration for @Model.VulcanHandler.Index</h2>
    @if (!Model.HasClients)
    {
        <h3>No clients found (is your Elasticsearch started and accessible?)</h3>
    }
    else
    {
        <div data-dojo-type="dijit/layout/TabContainer" style="width: 100%;" id="tabContainer" dolayout="true">
            <div data-dojo-type="dijit/layout/ContentPane" title="Configuration" data-dojo-props="selected:true">
                <h3>Index Information</h3>
                <table class="epi-default">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Health</th>
                            <th>Status</th>
                            <th>Shards</th>
                            <th>Replicas</th>
                            <th>Doc Count</th>
                            <th>Size</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var record in Model.IndexHealthDescriptor)
                        {
                            <tr>
                                <td>@record.Index</td>
                                <td>@record.Health</td>
                                <td>@record.Status</td>
                                <td>@record.Primary</td>
                                <td>@record.Replica</td>
                                <td>@record.DocsCount</td>
                                <td>@record.StoreSize</td>
                            </tr>
                        }
                    </tbody>
                </table>

                <h3>Indexing Modifiers</h3>
                @if (!Model.HasIndexModifiers)
                {
                    <strong>None configured</strong>
                }
                else
                {
                    <ul>
                        @foreach (var indexingModifier in Model.VulcanIndexModifiers)
                        {
                            <li>&gt; @indexingModifier.GetType().FullName</li>
                        }
                    </ul>
                }
                <h3>POCO Indexers</h3>
                @if (!Model.HasPocoIndexers)
                {
                    <strong>None configured</strong>
                }
                else
                {
                    <ul>
                        @foreach (var indexer in Model.PocoIndexers)
                        {
                            <li>&gt; @indexer.GetType().FullName</li>
                        }
                    </ul>
                }
            </div>
            @foreach (var client in Model.VulcanClients)
            {
                var indexName = client.IndexName;
                var langName = client.Language.Name;
                <div data-dojo-type="dijit/layout/ContentPane" title="Client: @(Model.ClientViewInfo[indexName].Item2)" data-dojo-props="selected:false" style="">
                    <h3 style="float:left;">Synonyms</h3>
                    <button data-dojo-type="dijit/form/Button" type="button" class="epi-danger" style="float:right;padding-top:10px;">
                        Remove selected Synonyms
                        <script type="dojo/on" data-dojo-event="click" data-dojo-args="evt">
                            removeSynonyms('@langName');
                        </script>
                    </button>
                    <div id="@("grid" + langName)" style="height:200px;clear:both;"></div>
                    <br />
                    @using (Html.BeginForm("AddSynonym", null, new { Language = langName }, FormMethod.Post, null))
                    {
                        <div style="width:33%;float:left;">
                            <span>Term </span>@Html.TextBox("AddTerm-" + langName)
                        </div>
                        <div style="width:33%;float:left;">
                            <span>Synonyms </span>@Html.TextBox("Synonyms-" + langName)
                        </div>
                        <div style="width:33%;float:left;">
                            <label for="@("BiDirectional-" + langName)">Bi-Directional? </label><input type="checkbox" id="BiDirectional-@langName" name="BiDirectional-@langName" />
                            <button data-dojo-type="dijit/form/Button" type="button" class="epi-danger" style="float:right;">
                                Add Synonym
                                <script type="dojo/on" data-dojo-event="click" data-dojo-args="evt">
                                    addSynonym('@langName');
                                </script>
                            </button>
                        </div>
                    }
                    <div style="clear:both;"></div>
                    <hr />
                    <h3>Contents (@Model.ClientViewInfo[indexName].Item1)</h3>
                    <ul>
                        @foreach (var countInfo in Model.ClientViewInfo[indexName].Item3)
                        {
                            <li>&gt; @countInfo</li>
                        }
                    </ul>
                </div>

            }
        </div>
    }
</div>

@if (Model.HasClients)
{
    <script>
        require(["dojo/parser", "dijit/layout/TabContainer", "dijit/layout/ContentPane", "dojo/domReady!", "dijit/form/Button"], function () {
            @foreach(var client in Model.VulcanClients)
            {
                <text>populateSynonyms('@client.Language.Name');</text>
            }

            setHeight();
        });

        function setHeight() {
            var windowHeight = $(window).height();
            $('#tabContainer').css('height', windowHeight - 120);
        };

        $(window).resize(function() {
            setHeight();
        });

        function addSynonym(language) {
            var addUrl = "/Vulcan-Api/Synonym/Add/" +
                encodeURI($('#AddTerm-' + language).val()) +
                "/" +
                encodeURI($('#Synonyms-' + language).val()) +
                "/" +
                encodeURI($('#BiDirectional-' + language).is(":checked")) +
                "/" +
                language;
            dojo.xhrPost({
                url: addUrl,
                load: function() {
                    populateSynonyms(language);
                },
                error: function() {
                    alert('Sorry, could not add synonym: ' + grid.row(value).data.Term);
                }
            });
        }

        function removeSynonyms(language) {
            require(["dijit/registry"],
                function(registry) {
                    var removeGrid = registry.byId("grid" + language);

                    $.each(removeGrid.selection,
                        function(value) {
                            dojo.xhrPost({
                                url: "/Vulcan-Api/Synonym/Remove/" +
                                    encodeURI(removeGrid.row(value).data.Term) +
                                    "/" +
                                    language,
                                load: function() {
                                    populateSynonyms(language);
                                },
                                error: function() {
                                    alert('Sorry, could not remove synonym: ' + removeGrid.row(value).data.Term);
                                }
                            });
                        });
                });
        }

        function populateSynonyms(language) {
            require(["dojo/store/JsonRest", "dijit/registry"],
                function (JsonRest, registry) {
                    var synonymStore = new JsonRest({ target: "/Vulcan-Api/Synonym/List/" });
                    synonymStore.get(language).then(function(synonynms) {
                        var data = [];

                        $.each(synonynms,
                            function(key, value) {
                                data.push({ Term: key, Synonyms: value.Key, BiDirectional: value.Value });
                            });

                        var grid = registry.byId("grid" + language);

                        if (grid === undefined) {
                            require([
                                "dojo/_base/declare", "dgrid/Grid", "dgrid/Selection",
                                "@(Model.ProtectedUiPath)TcbInternetSolutions.Vulcan.UI/Scripts/DijitRegistry.js"
                            ], function (declare, dGrid, dSelection, dijitRegistry) {

                                grid = new (declare([dGrid, dSelection, dijitRegistry]))({
                                    selectionMode: 'toggle',
                                    columns: {
                                        Term: 'Term',
                                        Synonyms: 'Synonyms',
                                        BiDirectional: 'Bi-directional?'
                                    }
                                }, 'grid' + language);

                                grid.refresh();
                                grid.renderArray(data);
                            });
                        }

                        if (grid !== undefined && grid !== null) {
                            grid.refresh();
                            grid.renderArray(data);
                        }
                    });
                });
        }
    </script>
}